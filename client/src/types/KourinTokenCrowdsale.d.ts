/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface KourinTokenCrowdsaleInterface extends ethers.utils.Interface {
  functions: {
    'buyTokens(address)': FunctionFragment
    'closingTime()': FunctionFragment
    'getCurrentPhase()': FunctionFragment
    'getCurrentRate()': FunctionFragment
    'getPeriods()': FunctionFragment
    'getRates()': FunctionFragment
    'hasClosed()': FunctionFragment
    'hasStarted()': FunctionFragment
    'openingTime()': FunctionFragment
    'periods(uint256)': FunctionFragment
    'rate()': FunctionFragment
    'rates(uint256)': FunctionFragment
    'receive()': FunctionFragment
    'startTime()': FunctionFragment
    'token()': FunctionFragment
    'wallet()': FunctionFragment
    'weiRaised()': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'buyTokens', values: [string]): string
  encodeFunctionData(
    functionFragment: 'closingTime',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'getCurrentPhase',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'getCurrentRate',
    values?: undefined,
  ): string
  encodeFunctionData(functionFragment: 'getPeriods', values?: undefined): string
  encodeFunctionData(functionFragment: 'getRates', values?: undefined): string
  encodeFunctionData(functionFragment: 'hasClosed', values?: undefined): string
  encodeFunctionData(functionFragment: 'hasStarted', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'openingTime',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'periods',
    values: [BigNumberish],
  ): string
  encodeFunctionData(functionFragment: 'rate', values?: undefined): string
  encodeFunctionData(functionFragment: 'rates', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'receive', values?: undefined): string
  encodeFunctionData(functionFragment: 'startTime', values?: undefined): string
  encodeFunctionData(functionFragment: 'token', values?: undefined): string
  encodeFunctionData(functionFragment: 'wallet', values?: undefined): string
  encodeFunctionData(functionFragment: 'weiRaised', values?: undefined): string

  decodeFunctionResult(functionFragment: 'buyTokens', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'closingTime', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getCurrentPhase',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getCurrentRate',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'getPeriods', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getRates', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'hasClosed', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'hasStarted', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'openingTime', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'periods', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'rate', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'rates', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'receive', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'startTime', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'wallet', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'weiRaised', data: BytesLike): Result

  events: {
    'TokenPurchase(address,address,uint256,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'TokenPurchase'): EventFragment
}

export class KourinTokenCrowdsale extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: KourinTokenCrowdsaleInterface

  functions: {
    buyTokens(
      _beneficiary: string,
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>

    'buyTokens(address)'(
      _beneficiary: string,
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>

    closingTime(overrides?: CallOverrides): Promise<[BigNumber]>

    'closingTime()'(overrides?: CallOverrides): Promise<[BigNumber]>

    getCurrentPhase(overrides?: CallOverrides): Promise<[BigNumber, boolean]>

    'getCurrentPhase()'(
      overrides?: CallOverrides,
    ): Promise<[BigNumber, boolean]>

    getCurrentRate(overrides?: CallOverrides): Promise<[BigNumber]>

    'getCurrentRate()'(overrides?: CallOverrides): Promise<[BigNumber]>

    getPeriods(overrides?: CallOverrides): Promise<[BigNumber[]]>

    'getPeriods()'(overrides?: CallOverrides): Promise<[BigNumber[]]>

    getRates(overrides?: CallOverrides): Promise<[BigNumber[]]>

    'getRates()'(overrides?: CallOverrides): Promise<[BigNumber[]]>

    hasClosed(overrides?: CallOverrides): Promise<[boolean]>

    'hasClosed()'(overrides?: CallOverrides): Promise<[boolean]>

    hasStarted(overrides?: CallOverrides): Promise<[boolean]>

    'hasStarted()'(overrides?: CallOverrides): Promise<[boolean]>

    openingTime(overrides?: CallOverrides): Promise<[BigNumber]>

    'openingTime()'(overrides?: CallOverrides): Promise<[BigNumber]>

    periods(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>

    'periods(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    rate(overrides?: CallOverrides): Promise<[BigNumber]>

    'rate()'(overrides?: CallOverrides): Promise<[BigNumber]>

    rates(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>

    'rates(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    receive(overrides?: PayableOverrides): Promise<ContractTransaction>

    'receive()'(overrides?: PayableOverrides): Promise<ContractTransaction>

    startTime(overrides?: CallOverrides): Promise<[BigNumber]>

    'startTime()'(overrides?: CallOverrides): Promise<[BigNumber]>

    token(overrides?: CallOverrides): Promise<[string]>

    'token()'(overrides?: CallOverrides): Promise<[string]>

    wallet(overrides?: CallOverrides): Promise<[string]>

    'wallet()'(overrides?: CallOverrides): Promise<[string]>

    weiRaised(overrides?: CallOverrides): Promise<[BigNumber]>

    'weiRaised()'(overrides?: CallOverrides): Promise<[BigNumber]>
  }

  buyTokens(
    _beneficiary: string,
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>

  'buyTokens(address)'(
    _beneficiary: string,
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>

  closingTime(overrides?: CallOverrides): Promise<BigNumber>

  'closingTime()'(overrides?: CallOverrides): Promise<BigNumber>

  getCurrentPhase(overrides?: CallOverrides): Promise<[BigNumber, boolean]>

  'getCurrentPhase()'(overrides?: CallOverrides): Promise<[BigNumber, boolean]>

  getCurrentRate(overrides?: CallOverrides): Promise<BigNumber>

  'getCurrentRate()'(overrides?: CallOverrides): Promise<BigNumber>

  getPeriods(overrides?: CallOverrides): Promise<BigNumber[]>

  'getPeriods()'(overrides?: CallOverrides): Promise<BigNumber[]>

  getRates(overrides?: CallOverrides): Promise<BigNumber[]>

  'getRates()'(overrides?: CallOverrides): Promise<BigNumber[]>

  hasClosed(overrides?: CallOverrides): Promise<boolean>

  'hasClosed()'(overrides?: CallOverrides): Promise<boolean>

  hasStarted(overrides?: CallOverrides): Promise<boolean>

  'hasStarted()'(overrides?: CallOverrides): Promise<boolean>

  openingTime(overrides?: CallOverrides): Promise<BigNumber>

  'openingTime()'(overrides?: CallOverrides): Promise<BigNumber>

  periods(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  'periods(uint256)'(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  rate(overrides?: CallOverrides): Promise<BigNumber>

  'rate()'(overrides?: CallOverrides): Promise<BigNumber>

  rates(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  'rates(uint256)'(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  receive(overrides?: PayableOverrides): Promise<ContractTransaction>

  'receive()'(overrides?: PayableOverrides): Promise<ContractTransaction>

  startTime(overrides?: CallOverrides): Promise<BigNumber>

  'startTime()'(overrides?: CallOverrides): Promise<BigNumber>

  token(overrides?: CallOverrides): Promise<string>

  'token()'(overrides?: CallOverrides): Promise<string>

  wallet(overrides?: CallOverrides): Promise<string>

  'wallet()'(overrides?: CallOverrides): Promise<string>

  weiRaised(overrides?: CallOverrides): Promise<BigNumber>

  'weiRaised()'(overrides?: CallOverrides): Promise<BigNumber>

  callStatic: {
    buyTokens(_beneficiary: string, overrides?: CallOverrides): Promise<void>

    'buyTokens(address)'(
      _beneficiary: string,
      overrides?: CallOverrides,
    ): Promise<void>

    closingTime(overrides?: CallOverrides): Promise<BigNumber>

    'closingTime()'(overrides?: CallOverrides): Promise<BigNumber>

    getCurrentPhase(overrides?: CallOverrides): Promise<[BigNumber, boolean]>

    'getCurrentPhase()'(
      overrides?: CallOverrides,
    ): Promise<[BigNumber, boolean]>

    getCurrentRate(overrides?: CallOverrides): Promise<BigNumber>

    'getCurrentRate()'(overrides?: CallOverrides): Promise<BigNumber>

    getPeriods(overrides?: CallOverrides): Promise<BigNumber[]>

    'getPeriods()'(overrides?: CallOverrides): Promise<BigNumber[]>

    getRates(overrides?: CallOverrides): Promise<BigNumber[]>

    'getRates()'(overrides?: CallOverrides): Promise<BigNumber[]>

    hasClosed(overrides?: CallOverrides): Promise<boolean>

    'hasClosed()'(overrides?: CallOverrides): Promise<boolean>

    hasStarted(overrides?: CallOverrides): Promise<boolean>

    'hasStarted()'(overrides?: CallOverrides): Promise<boolean>

    openingTime(overrides?: CallOverrides): Promise<BigNumber>

    'openingTime()'(overrides?: CallOverrides): Promise<BigNumber>

    periods(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'periods(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    rate(overrides?: CallOverrides): Promise<BigNumber>

    'rate()'(overrides?: CallOverrides): Promise<BigNumber>

    rates(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'rates(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    receive(overrides?: CallOverrides): Promise<void>

    'receive()'(overrides?: CallOverrides): Promise<void>

    startTime(overrides?: CallOverrides): Promise<BigNumber>

    'startTime()'(overrides?: CallOverrides): Promise<BigNumber>

    token(overrides?: CallOverrides): Promise<string>

    'token()'(overrides?: CallOverrides): Promise<string>

    wallet(overrides?: CallOverrides): Promise<string>

    'wallet()'(overrides?: CallOverrides): Promise<string>

    weiRaised(overrides?: CallOverrides): Promise<BigNumber>

    'weiRaised()'(overrides?: CallOverrides): Promise<BigNumber>
  }

  filters: {
    TokenPurchase(
      purchaser: string | null,
      beneficary: string | null,
      value: null,
      amount: null,
    ): EventFilter
  }

  estimateGas: {
    buyTokens(
      _beneficiary: string,
      overrides?: PayableOverrides,
    ): Promise<BigNumber>

    'buyTokens(address)'(
      _beneficiary: string,
      overrides?: PayableOverrides,
    ): Promise<BigNumber>

    closingTime(overrides?: CallOverrides): Promise<BigNumber>

    'closingTime()'(overrides?: CallOverrides): Promise<BigNumber>

    getCurrentPhase(overrides?: CallOverrides): Promise<BigNumber>

    'getCurrentPhase()'(overrides?: CallOverrides): Promise<BigNumber>

    getCurrentRate(overrides?: CallOverrides): Promise<BigNumber>

    'getCurrentRate()'(overrides?: CallOverrides): Promise<BigNumber>

    getPeriods(overrides?: CallOverrides): Promise<BigNumber>

    'getPeriods()'(overrides?: CallOverrides): Promise<BigNumber>

    getRates(overrides?: CallOverrides): Promise<BigNumber>

    'getRates()'(overrides?: CallOverrides): Promise<BigNumber>

    hasClosed(overrides?: CallOverrides): Promise<BigNumber>

    'hasClosed()'(overrides?: CallOverrides): Promise<BigNumber>

    hasStarted(overrides?: CallOverrides): Promise<BigNumber>

    'hasStarted()'(overrides?: CallOverrides): Promise<BigNumber>

    openingTime(overrides?: CallOverrides): Promise<BigNumber>

    'openingTime()'(overrides?: CallOverrides): Promise<BigNumber>

    periods(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'periods(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    rate(overrides?: CallOverrides): Promise<BigNumber>

    'rate()'(overrides?: CallOverrides): Promise<BigNumber>

    rates(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'rates(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    receive(overrides?: PayableOverrides): Promise<BigNumber>

    'receive()'(overrides?: PayableOverrides): Promise<BigNumber>

    startTime(overrides?: CallOverrides): Promise<BigNumber>

    'startTime()'(overrides?: CallOverrides): Promise<BigNumber>

    token(overrides?: CallOverrides): Promise<BigNumber>

    'token()'(overrides?: CallOverrides): Promise<BigNumber>

    wallet(overrides?: CallOverrides): Promise<BigNumber>

    'wallet()'(overrides?: CallOverrides): Promise<BigNumber>

    weiRaised(overrides?: CallOverrides): Promise<BigNumber>

    'weiRaised()'(overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    buyTokens(
      _beneficiary: string,
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>

    'buyTokens(address)'(
      _beneficiary: string,
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>

    closingTime(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'closingTime()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getCurrentPhase(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getCurrentPhase()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getCurrentRate(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getCurrentRate()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getPeriods(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getPeriods()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getRates(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getRates()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    hasClosed(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'hasClosed()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    hasStarted(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'hasStarted()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    openingTime(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'openingTime()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    periods(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'periods(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    rate(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'rate()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    rates(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'rates(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    receive(overrides?: PayableOverrides): Promise<PopulatedTransaction>

    'receive()'(overrides?: PayableOverrides): Promise<PopulatedTransaction>

    startTime(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'startTime()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'token()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    wallet(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'wallet()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    weiRaised(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'weiRaised()'(overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
